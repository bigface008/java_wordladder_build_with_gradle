
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;
import static org.junit.Assert.*;

public class AppTest {

    /**
     * testMapBuilder
     * Test if the WordLadder can read the file.
     */

    @Test
    public void testMapBuilder() {
        try {
            WordLadder map = new WordLadder("dictionary.txt", 3);
        } catch (Exception e) {
            System.out.println("Map Builder failed.");
        }
    }

    /**
     * testWrongWord
     * Test if the WordLadder can notice wrong input.
     */

    @Test
    public void testWrongWord() {
        try {
            WordLadder map = new WordLadder("dictionary.txt", 3);

            // Words with different length.
            assertEquals(false, map.testCheckWords("cat", "foot"));
            assertEquals(false, map.testCheckWords("cat", "azure"));

            // Same words.
            assertEquals(false, map.testCheckWords("cat", "cat"));
            assertEquals(false, map.testCheckWords("foot", "foot"));

            // Wrong words.
            assertEquals(false, map.testCheckWords("cat", "ca2"));
            assertEquals(false, map.testCheckWords("cat", "cas"));

            // Right words. Attention! The code used for lower case is written
            // in the ladder(), so testCheckWords() can behave rightly if its
            // args are highcase.
            assertEquals(true, map.testCheckWords("cat", "dog"));

        } catch (Exception e) {
            System.out.println("Map Builder failed.");
        }
    }

    /**
     * testStepNumber
     * Check the number of steps in path. Notice the last word is not included.
     * So if the result is "sit cit cat", the result of map.getStepNumber
     * should be 2.
     */

    @Test
    public void testStepNumber() {
        try {
            WordLadder map_len_3 = new WordLadder("dictionary.txt", 3);
            WordLadder map_len_4 = new WordLadder("dictionary.txt", 4);
            WordLadder map_len_5 = new WordLadder("dictionary.txt", 5);
            WordLadder map_len_6 = new WordLadder("dictionary.txt", 6);

            map_len_3.ladder("cat", "dog");
            assertEquals(3, map_len_3.getStepNumber());

            map_len_3.ladder("rat", "run");
            assertEquals(2, map_len_3.getStepNumber());

            map_len_3.ladder("cat", "run");
            assertEquals(3, map_len_3.getStepNumber());

            map_len_3.ladder("cat", "sit");
            assertEquals(2, map_len_3.getStepNumber());

            map_len_4.ladder("word", "foot");
            assertEquals(3, map_len_4.getStepNumber());

            map_len_4.ladder("word", "ball");
            assertEquals(4, map_len_4.getStepNumber());

            map_len_4.ladder("ball", "kill");
            assertEquals(2, map_len_4.getStepNumber());

            map_len_5.ladder("learn", "world");
            assertEquals(6, map_len_5.getStepNumber());

            map_len_5.ladder("kitty", "learn");
            assertEquals(7, map_len_5.getStepNumber());

            map_len_5.ladder("kitty", "world");
            assertEquals(8, map_len_5.getStepNumber());

            map_len_6.ladder("tennis", "rooter");
            assertEquals(7, map_len_6.getStepNumber());

            map_len_6.ladder("fisher", "ladder");
            assertEquals(7, map_len_6.getStepNumber());

            map_len_6.ladder("tennis", "ladder");
            assertEquals(6, map_len_6.getStepNumber());

        } catch (Exception e) {
            System.out.println("Map Builder failed.");
        }
    }
}
